import Mathlib.Tactic -- imports all the Lean tactics
import FormalisingMathematics.Section02reals.Sheet5 -- import a bunch of previous stuff
open Section2sheet3 -- чтобы иметь определение `TendsTo`
open Section2sheet5
/-!
# Инструкция по выполнению ДЗ №2.
Вам предлагается заменить `sorry` на валидные доказательства в примерах ниже.
На полный балл достаточно решить **любые 2 задачи**.
Могут оказаться полезными следующие тактики:
* `use` для подстановки значения в квантор `∃` в цели
* `obtain` для "распаковки" квантора `∃` в гипотезах
* `specialize` для подстановки значения в квантор `∀` в гипотезе

* `norm_num` для упрощения выражений содержащих нумералы
* `ring_nf`/`ring` для упрощения выражений в кольцах (и `ℝ` в частности)
* `linarith` для решения линейных уравнений/неравенств
* `simp` для упрощения выражений и раскрытия определений

* `exact?` для поиска в библиотеке подходящей леммы, которая бы закрыла цель при помощи `exact`.
* `rw?` для поиска леммы, которая бы упростила или закрыла цель при помощи тактики `rw`.

* `have` для введения вспомогательных гипотез в контекст

Пользуйтесь так же теоремами доказанными на лекции (они должны быть доступны благодаря `import` и `open` выше).

Не стесняйтесь спрашивать вопросы в чате!
-/


/-- Задача 1.
Комментарий: на самом деле условие `hc` не требуется. Можете попробовать его убрать доказать факт в общем случае.
-/
example (a : ℕ → ℝ) (t : ℝ) (h : TendsTo a t) (c : ℝ) (hc : 0 < c) :
    TendsTo (fun n ↦ c * a n) (c * t) := by
  sorry

/-- Задача 2.
`x ∣ y` означает "`x` делит `y`". Тактика `norm_num` умеет доказывать делимость для числовых выражений.
Подсказка: сократить доказательство поможет комбинатор `<;>`.
-/
example : ∀ (a b c : ℤ), ∃ m, (a = 1 ∨ a = 9) → (b = 3 ∨ b = 5) → (c = 42 ∨ c = 24) → m ∣ (a + b + c) := by
  sorry

/-- Задача 3 (сложная). -/
example (a : ℕ → ℝ) (s t : ℝ) (hs : TendsTo a s) (ht : TendsTo a t) : s = t := by
  sorry
